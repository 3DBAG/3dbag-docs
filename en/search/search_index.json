{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 Welcome to the documentation of the 3D BAG by the 3D geoinformation group! This is the first open 3D building data set that is generated fully automatically and covers a whole country on this level of detail. On this page you will find information on what is the 3D BAG and how it is created, a few of the possible use cases and how does the 3D BAG relate to similar data sets in the Netherlands. Data Sources describes the data sets that are used as input for the 3D BAG. Schema describes the structure of the 3D BAG in detail. Data Formats describes the different ways we deliver the 3D BAG. Terms of Use explains the conditions that apply when using the 3D BAG in your application. Contact shows where you can ask questions or how can you contact us. And with the Viewer you can view the 3D BAG in your browser! What is the 3D BAG? \u00b6 The 3D BAG is an up-to-date data set containing 3D building models of the Netherlands. The 3D BAG is open data. It contains 3D models at multiple levels of detail, which are generated by combining two open data sets: the building data from the BAG and the height data from the AHN . The 3D BAG is updated regularly, keeping it up-to-date with the latest openly available building stock and elevation information. The 3D BAG is also a place for experiments. It is a medium for testing ideas as we do in the 3D geoinformation research group. Based on experiences with the data, we are constantly improving our methods, and by providing our own service we retain full control over the whole process from input data, pre-processing and reconstruction to querying and using the reconstructed 3D data in urban applications. This allows us to develop, test and release improvements, or even break things, as we see best. Main features \u00b6 Three levels of detail . Pick the most suitable LoD for your application from the available LoD1.2, LoD1.3 and LoD2.2. Both 2D and 3D . Besides the 3D models, we also offer the 2D projections of their roof surfaces with associated height references. Underground and overlapping buildings and building parts removed . The completely underground and overlapping buildings (eg one building \"floating\" above another) are excluded from the reconstruction. Buildings with parts under the terrain have their underground parts cut off. Fall back to a simple model for problematic input . Buildings with glass roofs, especially greenhouses, have an inconsistent point cloud in the AHN. For these buildings, that usually have a very simple shape anyways, we fall back to a simplified 3D model in order to generate usable models. Quality control integrated . We run our 3D models through val3dity , so that you don't need to validate the 3D data yourself. Available in several formats . CityJSON, GeoPackage, Wavefront OBJ, PostgreSQL, WMS, WFS. Common applications \u00b6 Some of the use cases for this data set that we know about: Applications related to energy use in buildings, such as estimating energy demand, retrofitting costs, finding suitable roofs for solar panels. Simulating the wind flow and pollutant dispersion in urban areas (eg. Simwind ) Calculating noise pollution in urban areas (eg. 3D Noise ) Analysing the urban structure and evaluating new developments. Do you have an interesting use case for the 3D BAG? We would love to hear about it! Relation to similar data sets \u00b6 3D Basisvoorziening \u00b6 The 3D Basisvoorziening is a collection of Dutch national 3D data sets created in a collaboration of the Kadaster and the 3D geoinformation research group. It was made available in the summer of 2020. While the 3D BAG only contains objects from the BAG, the 3D Basisvoorziening also contains object from the Large Scale Topographic Map (BGT) of the Netherlands. Thus, the 3D BAG only contains buildings, while the 3D Basisvoorziening is a watertight 3D model of the whole country, including terrain objects. Furthermore, the 3D BAG only uses the AHN as height source, while the 3D Basisvoorziening also uses a yearly updated point cloud created from stereo images ( Beeldmateriaal Nederland ). The tools and algorithms that are used for generating the 3D Basisvoorziening, are created by the 3D geoinformation group. In fact, the LoD1.3 models in the 3D Basisvoorziening were generated with a previous, more stable version of the same algorithms that we use in the 3D BAG. Since then, we have improved the reconstruction process specifically for a better LoD2.2 reconstruction. 3D Geluid \u00b6 The 3D Geluid data set was created in collaboration with the National Institute for Public Health and the Environment (RIVM), Ministry of Infrastructure and Water Management (Rijkswaterstaat), Interprovinciaal Overleg, Kadaster and the 3D geoinformation research group. Both the 3D Geluid and the 3D BAG use the BAG as a basis for the buildings. While the 3D BAG uses the AHN only, the 3D Geluid data has been extended with LoD1.2 models that were generated with the current point cloud of Kadaster where the buildings are newer than AHN. Besides building models, the 3D Geluid data also contains two additional layers that model the height of the terrain, and the sound absorption values of the various terrain objects. The building models in 3D Geluid data are LoD1.3 and represented as 2D only, since the current common noise calculation software can only handle 2D buildings (+ height attribute). Similarly to the 3D Basisvoorziening, the LoD1.3 models in the 3D Geluid data were generated with a previous, more stable version of the same algorithms that we use in the 3D BAG. Future plans \u00b6 One of the most common questions related to building heights is the exact number of floors in the building. However, answering this proves to be more complex than dividing the building height by an average floor height (eg 3 meters). Thus, we have an ongoing MSc research that is investigating this topic. Addresses. At the moment we don't add the addresses from the BAG to the 3D BAG. We might add them in the future. Orientation of roof surfaces. It is already possible to query the orientation of roof surfaces in the viewer. We may store this information as attribute so that this information can be used in spatial analysis, such as for solar panel potential analysis. Funding \u00b6 This project has received funding from the European Research Council (ERC) under the European Unions Horizon2020 Research & Innovation Programme (grant agreement no. 677312 UMnD: Urban modelling in higher dimensions). The technology behind the 3D BAG service was developed by the 3D Geoinformation research group , Department of Urbanism at the Delft University of Technology. This has been done in various research projects. Funding has been received from the European Commission (ERC), the Netherlands Organization for Scientific Research (NWO), and the Amsterdam Institute of Advanced Metropolitan Solutions (AMS). The algorithms have been further improved in collaborations with partners such as RIVM, Rijkswaterstaat and Kadaster.","title":"Overview"},{"location":"#overview","text":"Welcome to the documentation of the 3D BAG by the 3D geoinformation group! This is the first open 3D building data set that is generated fully automatically and covers a whole country on this level of detail. On this page you will find information on what is the 3D BAG and how it is created, a few of the possible use cases and how does the 3D BAG relate to similar data sets in the Netherlands. Data Sources describes the data sets that are used as input for the 3D BAG. Schema describes the structure of the 3D BAG in detail. Data Formats describes the different ways we deliver the 3D BAG. Terms of Use explains the conditions that apply when using the 3D BAG in your application. Contact shows where you can ask questions or how can you contact us. And with the Viewer you can view the 3D BAG in your browser!","title":"Overview"},{"location":"#what-is-the-3d-bag","text":"The 3D BAG is an up-to-date data set containing 3D building models of the Netherlands. The 3D BAG is open data. It contains 3D models at multiple levels of detail, which are generated by combining two open data sets: the building data from the BAG and the height data from the AHN . The 3D BAG is updated regularly, keeping it up-to-date with the latest openly available building stock and elevation information. The 3D BAG is also a place for experiments. It is a medium for testing ideas as we do in the 3D geoinformation research group. Based on experiences with the data, we are constantly improving our methods, and by providing our own service we retain full control over the whole process from input data, pre-processing and reconstruction to querying and using the reconstructed 3D data in urban applications. This allows us to develop, test and release improvements, or even break things, as we see best.","title":"What is the 3D BAG?"},{"location":"#main-features","text":"Three levels of detail . Pick the most suitable LoD for your application from the available LoD1.2, LoD1.3 and LoD2.2. Both 2D and 3D . Besides the 3D models, we also offer the 2D projections of their roof surfaces with associated height references. Underground and overlapping buildings and building parts removed . The completely underground and overlapping buildings (eg one building \"floating\" above another) are excluded from the reconstruction. Buildings with parts under the terrain have their underground parts cut off. Fall back to a simple model for problematic input . Buildings with glass roofs, especially greenhouses, have an inconsistent point cloud in the AHN. For these buildings, that usually have a very simple shape anyways, we fall back to a simplified 3D model in order to generate usable models. Quality control integrated . We run our 3D models through val3dity , so that you don't need to validate the 3D data yourself. Available in several formats . CityJSON, GeoPackage, Wavefront OBJ, PostgreSQL, WMS, WFS.","title":"Main features"},{"location":"#common-applications","text":"Some of the use cases for this data set that we know about: Applications related to energy use in buildings, such as estimating energy demand, retrofitting costs, finding suitable roofs for solar panels. Simulating the wind flow and pollutant dispersion in urban areas (eg. Simwind ) Calculating noise pollution in urban areas (eg. 3D Noise ) Analysing the urban structure and evaluating new developments. Do you have an interesting use case for the 3D BAG? We would love to hear about it!","title":"Common applications"},{"location":"#relation-to-similar-data-sets","text":"","title":"Relation to similar data sets"},{"location":"#3d-basisvoorziening","text":"The 3D Basisvoorziening is a collection of Dutch national 3D data sets created in a collaboration of the Kadaster and the 3D geoinformation research group. It was made available in the summer of 2020. While the 3D BAG only contains objects from the BAG, the 3D Basisvoorziening also contains object from the Large Scale Topographic Map (BGT) of the Netherlands. Thus, the 3D BAG only contains buildings, while the 3D Basisvoorziening is a watertight 3D model of the whole country, including terrain objects. Furthermore, the 3D BAG only uses the AHN as height source, while the 3D Basisvoorziening also uses a yearly updated point cloud created from stereo images ( Beeldmateriaal Nederland ). The tools and algorithms that are used for generating the 3D Basisvoorziening, are created by the 3D geoinformation group. In fact, the LoD1.3 models in the 3D Basisvoorziening were generated with a previous, more stable version of the same algorithms that we use in the 3D BAG. Since then, we have improved the reconstruction process specifically for a better LoD2.2 reconstruction.","title":"3D Basisvoorziening"},{"location":"#3d-geluid","text":"The 3D Geluid data set was created in collaboration with the National Institute for Public Health and the Environment (RIVM), Ministry of Infrastructure and Water Management (Rijkswaterstaat), Interprovinciaal Overleg, Kadaster and the 3D geoinformation research group. Both the 3D Geluid and the 3D BAG use the BAG as a basis for the buildings. While the 3D BAG uses the AHN only, the 3D Geluid data has been extended with LoD1.2 models that were generated with the current point cloud of Kadaster where the buildings are newer than AHN. Besides building models, the 3D Geluid data also contains two additional layers that model the height of the terrain, and the sound absorption values of the various terrain objects. The building models in 3D Geluid data are LoD1.3 and represented as 2D only, since the current common noise calculation software can only handle 2D buildings (+ height attribute). Similarly to the 3D Basisvoorziening, the LoD1.3 models in the 3D Geluid data were generated with a previous, more stable version of the same algorithms that we use in the 3D BAG.","title":"3D Geluid"},{"location":"#future-plans","text":"One of the most common questions related to building heights is the exact number of floors in the building. However, answering this proves to be more complex than dividing the building height by an average floor height (eg 3 meters). Thus, we have an ongoing MSc research that is investigating this topic. Addresses. At the moment we don't add the addresses from the BAG to the 3D BAG. We might add them in the future. Orientation of roof surfaces. It is already possible to query the orientation of roof surfaces in the viewer. We may store this information as attribute so that this information can be used in spatial analysis, such as for solar panel potential analysis.","title":"Future plans"},{"location":"#funding","text":"This project has received funding from the European Research Council (ERC) under the European Unions Horizon2020 Research & Innovation Programme (grant agreement no. 677312 UMnD: Urban modelling in higher dimensions). The technology behind the 3D BAG service was developed by the 3D Geoinformation research group , Department of Urbanism at the Delft University of Technology. This has been done in various research projects. Funding has been received from the European Commission (ERC), the Netherlands Organization for Scientific Research (NWO), and the Amsterdam Institute of Advanced Metropolitan Solutions (AMS). The algorithms have been further improved in collaborations with partners such as RIVM, Rijkswaterstaat and Kadaster.","title":"Funding"},{"location":"contact/","text":"Help \u00b6 If you have questions or need help about the data, go to https://geoforum.nl/ . When posting questions on the forum, please use the tag 3D BAG . Although the forum is mainly in Dutch, you are free to use English of course. Feedback \u00b6 We are very happy to hear whatever you have to say about the 3D BAG. You can give your feedback via this form . If you want to report issues with specific models, you can do so by clicking on the model in the 3D viewer , and then clicking on the red Report a problem button in the Building Information viewer. Viewer \u00b6 At the GitHub repository of the viewer, bugs specifically in the viewer can be reported. Special thanks to NASA AMMOS for 3DTilesRendererJS , which is used for visualising the buildings, and to Geodan for pg2b3dm , used to export our data to 3D Tiles. Mail \u00b6 Finally, you an also contact us directly at info@3dbag.nl .","title":"Contact"},{"location":"contact/#help","text":"If you have questions or need help about the data, go to https://geoforum.nl/ . When posting questions on the forum, please use the tag 3D BAG . Although the forum is mainly in Dutch, you are free to use English of course.","title":"Help"},{"location":"contact/#feedback","text":"We are very happy to hear whatever you have to say about the 3D BAG. You can give your feedback via this form . If you want to report issues with specific models, you can do so by clicking on the model in the 3D viewer , and then clicking on the red Report a problem button in the Building Information viewer.","title":"Feedback"},{"location":"contact/#viewer","text":"At the GitHub repository of the viewer, bugs specifically in the viewer can be reported. Special thanks to NASA AMMOS for 3DTilesRendererJS , which is used for visualising the buildings, and to Geodan for pg2b3dm , used to export our data to 3D Tiles.","title":"Viewer"},{"location":"contact/#mail","text":"Finally, you an also contact us directly at info@3dbag.nl .","title":"Mail"},{"location":"copyright/","text":"Copyright and License \u00b6 Data and Documentation \u00b6 3D BAG by 3D geoinformation research group is licensed under CC BY 4.0 The 3D BAG is open data. This includes all downloadable data files and data distributed through web services. You are free to copy, distribute, and adapt the 3D BAG data, as long as you, give credit to the 3D geoinformation group, provide a link to this license, indicate if you made any changes to the data. Note that some content in the documentation is reused from other works. Such content has its source marked explicitly, and you need to comply with their respective license when using them. How to credit the 3D BAG data \u00b6 We require that you use the credit \u201c\u00a9 3D BAG by tudelft3d\u201d. In digital media you must also provide a link to this copyright page . In printed media, or where links are not possible, its best if you expand the credit to \"3D BAG by 3D geoinformation research group, TU Delft\" and direct the readers to \"3dbag.nl\". The name tudelft3d is a short alias to the full name of our group, 3D geoinformation research group . We use tudelft3d often in our communication. If you integrate the 3D BAG data in a browsable electronic map, the credit should appear in the bottom right corner of the map. How to cite 3D BAG \u00b6 We have a preprint available for an article that is to be published in the March 2022 issue of the Journal of Photogrammetric Engineering & Remote Sensing . @misc{peters2021automated, title={Automated 3D reconstruction of LoD2 and LoD1 models for all 10 million buildings of the Netherlands}, author={Ravi Peters and Bal\u00e1zs Dukai and Stelios Vitalis and Jordi van Liempt and Jantien Stoter}, year={2021}, eprint={2201.01191}, archivePrefix={arXiv}, primaryClass={cs.CV} } Software \u00b6 The software and components that we created for making and serving the 3D BAG are licensed independently of the 3D BAG data and documentation. Our viewer relies on 3DTilesRendererJS ( license ) by NASA AMMOS and pg2b3dm ( license ) by Geodan.","title":"Copyright"},{"location":"copyright/#copyright-and-license","text":"","title":"Copyright and License"},{"location":"copyright/#data-and-documentation","text":"3D BAG by 3D geoinformation research group is licensed under CC BY 4.0 The 3D BAG is open data. This includes all downloadable data files and data distributed through web services. You are free to copy, distribute, and adapt the 3D BAG data, as long as you, give credit to the 3D geoinformation group, provide a link to this license, indicate if you made any changes to the data. Note that some content in the documentation is reused from other works. Such content has its source marked explicitly, and you need to comply with their respective license when using them.","title":"Data and Documentation"},{"location":"copyright/#how-to-credit-the-3d-bag-data","text":"We require that you use the credit \u201c\u00a9 3D BAG by tudelft3d\u201d. In digital media you must also provide a link to this copyright page . In printed media, or where links are not possible, its best if you expand the credit to \"3D BAG by 3D geoinformation research group, TU Delft\" and direct the readers to \"3dbag.nl\". The name tudelft3d is a short alias to the full name of our group, 3D geoinformation research group . We use tudelft3d often in our communication. If you integrate the 3D BAG data in a browsable electronic map, the credit should appear in the bottom right corner of the map.","title":"How to credit the 3D BAG data"},{"location":"copyright/#how-to-cite-3d-bag","text":"We have a preprint available for an article that is to be published in the March 2022 issue of the Journal of Photogrammetric Engineering & Remote Sensing . @misc{peters2021automated, title={Automated 3D reconstruction of LoD2 and LoD1 models for all 10 million buildings of the Netherlands}, author={Ravi Peters and Bal\u00e1zs Dukai and Stelios Vitalis and Jordi van Liempt and Jantien Stoter}, year={2021}, eprint={2201.01191}, archivePrefix={arXiv}, primaryClass={cs.CV} }","title":"How to cite 3D BAG"},{"location":"copyright/#software","text":"The software and components that we created for making and serving the 3D BAG are licensed independently of the 3D BAG data and documentation. Our viewer relies on 3DTilesRendererJS ( license ) by NASA AMMOS and pg2b3dm ( license ) by Geodan.","title":"Software"},{"location":"delivery/cityjson/","text":"CityJSON is an open data format for distributing 3D city models (also known as digital twins), and a JSON-encoding of the CityGML data model. CityJSON is in the process of becoming a community standard of the Open Geospatial Consortium. The CityJSON specification prescribes how to store the 3D geometry as well as the semantics of common objects in a city, eg. buildings, vegetation, roads, waterways and bridges. This makes the the data model optimal for spatial analysis. The three guiding principles for the format are compactness, simplicity and ease of use for software development. CityJSON has approximately a 6x smaller size than CityGML due to the JSON-encoding. Furthermore, there are already several open software that work with CityJSON files. We present a few of them below. Try them out! The CityJSON files of the 3D BAG contain all the 3D layers (LoD1.2, LoD1.3, LoD2.2), but only the attributes that apply to the whole building. ninja and azul \u00b6 ninja is a drag-and-drop web application for visualising and editing CityJSON files. On macOS azul can visualise several data formats, including CityJSON. A portion of the 3D BAG visualised in ninja. A portion of the 3D BAG visualised in azul. QGIS CityJSON Loader plugin \u00b6 With the CityJSON loader plugin it is possible to load CityJSON files into QGIS 3, and view them in 3D. You can open the 3D viewer by selecting View -> New 3D Map View . For QGIS 3 versions older than 3.2, there is an extra step necessary . A portion of the 3D BAG visualised in QGIS, with the 3D Map View on the top and the features in 2D on the bottom. cjio \u00b6 cjio is tool with a command-line-interface for working with CityJSON files. For instance, you can get information about the file contents, subset and merge files, convert them to other formats etc. List all the attributes (and more) in a 3D BAG file: cjio 3dbag_<version>_<tile ID>.json info --long Extract only the LoD2.2 from a 3D BAG file: cjio 3dbag_<version>_<tile ID>.json extract_lod 2 save out.json","title":"CityJSON"},{"location":"delivery/cityjson/#ninja-and-azul","text":"ninja is a drag-and-drop web application for visualising and editing CityJSON files. On macOS azul can visualise several data formats, including CityJSON. A portion of the 3D BAG visualised in ninja. A portion of the 3D BAG visualised in azul.","title":"ninja and azul"},{"location":"delivery/cityjson/#qgis-cityjson-loader-plugin","text":"With the CityJSON loader plugin it is possible to load CityJSON files into QGIS 3, and view them in 3D. You can open the 3D viewer by selecting View -> New 3D Map View . For QGIS 3 versions older than 3.2, there is an extra step necessary . A portion of the 3D BAG visualised in QGIS, with the 3D Map View on the top and the features in 2D on the bottom.","title":"QGIS CityJSON Loader plugin"},{"location":"delivery/cityjson/#cjio","text":"cjio is tool with a command-line-interface for working with CityJSON files. For instance, you can get information about the file contents, subset and merge files, convert them to other formats etc. List all the attributes (and more) in a 3D BAG file: cjio 3dbag_<version>_<tile ID>.json info --long Extract only the LoD2.2 from a 3D BAG file: cjio 3dbag_<version>_<tile ID>.json extract_lod 2 save out.json","title":"cjio"},{"location":"delivery/gpkg/","text":"GeoPackage is an open geodata format, based on SQLite . It supports vector features, tile matrix sets, attributes and also extensions. The format can be used for storing certain types of 3D geometry. It is widely adopted an can be used in QGIS, ArcGIS and FME too. The 3D BAG GeoPackage files contain all the layers . GeoPackage in 3D in QGIS \u00b6 When opening a 3D BAG file in QGIS (by dragging the file or going to Layer -> Add Layer -> Add Vector Layer... ), you can choose which layers to import. In QGIS 3 it is possible to view the 3D layers in the 3D viewer (exact steps may vary between versions): Adjust the Layer Properties . Go to the 3D View tab and change No Symbols to Single Symbol and adjust the settings to your preference. In older QGIS 3 versions you will find the button Enable 3D renderer instead. Go to View -> 3D Map View to open the 3D viewer. The tab in the Layer Properties with the settings for the 3D Map View. A portion of the 3D BAG data in GeoPackage format. On the top is the 3D Map View, in the left the attributes, and in the bottom the 2D features.","title":"GeoPackage"},{"location":"delivery/gpkg/#geopackage-in-3d-in-qgis","text":"When opening a 3D BAG file in QGIS (by dragging the file or going to Layer -> Add Layer -> Add Vector Layer... ), you can choose which layers to import. In QGIS 3 it is possible to view the 3D layers in the 3D viewer (exact steps may vary between versions): Adjust the Layer Properties . Go to the 3D View tab and change No Symbols to Single Symbol and adjust the settings to your preference. In older QGIS 3 versions you will find the button Enable 3D renderer instead. Go to View -> 3D Map View to open the 3D viewer. The tab in the Layer Properties with the settings for the 3D Map View. A portion of the 3D BAG data in GeoPackage format. On the top is the 3D Map View, in the left the attributes, and in the bottom the 2D features.","title":"GeoPackage in 3D in QGIS"},{"location":"delivery/obj/","text":"Wavefront OBJ is an open data format for 3D graphics. It does not contain any attributes or semantics, only the 3D geometry of the building models. This format is primarily suitable for importing the 3D BAG geometries into 3D graphics applications or 3D CAD applicatons (this might require additional format conversion). The OBJ files for the 3D BAG contain the 3D geometries only and each 3D layer is stored in a separate file. The three OBJ files are compressed into a single ZIP file per tile. The object coordinates are in the Amersfoort / RD New + NAP height coordinate reference system. Blender \u00b6 A portion of the 3D BAG data opened in Blender. OBJ files can be directly opened in Blender. Besides, there is also a plugin for importing CityJSON files into Blender. The objects in the files are a real-world coordinate system. Therefore they have very large coordinates. When the file is imported into Blender, they are not centered around the origin (0, 0, 0) which causes the surfaces to flicker. Therefore, it is recommended to move the objects to the origin. When importing the OBJ file, choose the option Z Up , so that the objects are correctly oriented. If you turn off the Split by Object , then all objects (the buildings) are imported as a single Blender object, which makes it easier to move the whole file content. After the import, you can focus the camera to the objects by selecting Scene Collection on the right of the screen, then pressing . on the numpad (the regular . on the keyboard does not work). Then select the object (or all individual objects if split them on import) and press Tab to open the Edit Mode . Then click on the small arrow that is marked in the screenshot above. Then change the X and Y values to 0 . Press . on the numpad again to re-focus the camera on the model.","title":"Wavefront OBJ"},{"location":"delivery/obj/#blender","text":"A portion of the 3D BAG data opened in Blender. OBJ files can be directly opened in Blender. Besides, there is also a plugin for importing CityJSON files into Blender. The objects in the files are a real-world coordinate system. Therefore they have very large coordinates. When the file is imported into Blender, they are not centered around the origin (0, 0, 0) which causes the surfaces to flicker. Therefore, it is recommended to move the objects to the origin. When importing the OBJ file, choose the option Z Up , so that the objects are correctly oriented. If you turn off the Split by Object , then all objects (the buildings) are imported as a single Blender object, which makes it easier to move the whole file content. After the import, you can focus the camera to the objects by selecting Scene Collection on the right of the screen, then pressing . on the numpad (the regular . on the keyboard does not work). Then select the object (or all individual objects if split them on import) and press Tab to open the Edit Mode . Then click on the small arrow that is marked in the screenshot above. Then change the X and Y values to 0 . Press . on the numpad again to re-focus the camera on the model.","title":"Blender"},{"location":"delivery/postgresql/","text":"PostgreSQL is an open source relational database. With the PostGIS extension it is suitable for storing and managing very large geospatial databases. Therefore, we provide a PostgreSQL database dump of the complete 3D BAG. The 3D BAG PostgreSQL backup file contains all attributes and all layers that are available for the 3D BAG. The backup file was created with pg_dump , using the options --no-owner --no-privileges --format=directory . Importing the PostgreSQL backup \u00b6 The backup can be restored with the following command. Adapt it to your requirements if needed (read more at pg_restore ). pg_restore \\ --no-owner \\ --no-privileges \\ --format=directory \\ --jobs=8 \\ <connection parameters> \\ <path to the unzipped backup file> The <connection parameters> are --port and --username for instance. The restore process can take a number of hours.","title":"PostgreSQL"},{"location":"delivery/postgresql/#importing-the-postgresql-backup","text":"The backup can be restored with the following command. Adapt it to your requirements if needed (read more at pg_restore ). pg_restore \\ --no-owner \\ --no-privileges \\ --format=directory \\ --jobs=8 \\ <connection parameters> \\ <path to the unzipped backup file> The <connection parameters> are --port and --username for instance. The restore process can take a number of hours.","title":"Importing the PostgreSQL backup"},{"location":"delivery/webservices/","text":"Webservices make it possible to specify via an URL exactly which models to download from the 3D BAG. All major GIS software supports these services. From the 3D BAG we serve the 2D layers and the tile set that we use for distributing the data in various formats. You can find the webservice links on the 3D BAG Downloads page. WFS \u00b6 The Web Feature Service (WFS) is an Open Geospatial Consortium standard, and it describes how to query, create and modify geospatial data through the internet. LoD1.3 2D WFS layer visualised in QGIS, with the BRT Baselayer from PDOK in the background. WMS \u00b6 The Web Map Service is an Open Geospatial Consortium standard to retrieve maps as images through the internet. LoD1.3 2D WMS layer visualised in QGIS, with the BRT Baselayer from PDOK in the background. Webservices in QGIS \u00b6 Here you find a tutorial on using webservices in QGIS, created by one of our colleagues of the 3D geoinformation research group. At 3:18 in the video you can see how to load the webservices of the previous 3D BAG version. The process is almost the same for the current 3D BAG version. The video also refers to the PDOK services plugin , which is very handy for loading base layers.","title":"Webservices"},{"location":"delivery/webservices/#wfs","text":"The Web Feature Service (WFS) is an Open Geospatial Consortium standard, and it describes how to query, create and modify geospatial data through the internet. LoD1.3 2D WFS layer visualised in QGIS, with the BRT Baselayer from PDOK in the background.","title":"WFS"},{"location":"delivery/webservices/#wms","text":"The Web Map Service is an Open Geospatial Consortium standard to retrieve maps as images through the internet. LoD1.3 2D WMS layer visualised in QGIS, with the BRT Baselayer from PDOK in the background.","title":"WMS"},{"location":"delivery/webservices/#webservices-in-qgis","text":"Here you find a tutorial on using webservices in QGIS, created by one of our colleagues of the 3D geoinformation research group. At 3:18 in the video you can see how to load the webservices of the previous 3D BAG version. The process is almost the same for the current 3D BAG version. The video also refers to the PDOK services plugin , which is very handy for loading base layers.","title":"Webservices in QGIS"},{"location":"overview/group/","text":"The 3D geoinformation research group is part of the Delft University of Technology , and is affiliated with AMS, the Amsterdam Institute for Advanced Metropolitan Solutions . It focuses on the technologies underpinning geographical information systems (GIS), and aims at designing, developing, and implementing better systems to model 3D cities, buildings, and landscapes. These systems help in environmental modelling, urban planning, crisis management, automated cartographic generalisation, information modelling, modelling of the interior of buildings, etc. It is a multidisciplinary group, consisting of computer scientists, geomatics engineers, and geographers. Creators of the 3D BAG (in alphabetical order): Bal\u00e1zs Dukai Jordi van Liempt Ravi Peters Jantien Stoter Stelios Vitalis Teng Wu","title":"About Us"},{"location":"overview/media/","text":"Below you can find a list of notable articles, posts, tweets and videos about 3D BAG. Please send us a mail if you think something is missing! Applications of 3D BAG \u00b6 3D printing CityScale Heinze Havinga Wind simulation by Frank Van Gool Solar analysis by Dennis Hulsegge Flood simulation by Maxim Knepfle Old Cadastral boundaries in project Virtueel Hoogeveen by Andy Benjamins Shadow analysis in Revit by Ekko Nap Energy transition for the built environment VNG Tomahawk BIM integration by IRP Revit integration by Enveo Subdivision of 3DBAG into indoor entities by Coders CO. Public adoption of 3D BAG in other platforms \u00b6 Amsterdam 3D Utrecht 3D Zwolle ESRI Dordrecht by Niels van der Vaart Amersfoort by Maarten Welmers Signum SpotInfo ROM3D Shint\u014d Labs Tools and tutorials on 3D BAG \u00b6 GIS2BIM tool for Dynamo by Maarten Vroegindeweij Infraworks video tutorial by Richard de Nier 3D BAG in Revit video by BFAS 3D BAG in AutoCAD article + video by RODEMA 3D BAG CityJSON to IFC article + video by Hans Lammerts 3D BAG in the news \u00b6 3DBAG gets ERC funding 3D BAG wins the 2021 Geospatial World Excellence Award in the Content Platform category Reddit Tweakers.net Geo-Info BK nieuws LinkedIn announcement by Jantien Stoter Publications using 3DBAG \u00b6 Automatic Building Age Prediction from Street View Images","title":"In the media"},{"location":"overview/media/#applications-of-3d-bag","text":"3D printing CityScale Heinze Havinga Wind simulation by Frank Van Gool Solar analysis by Dennis Hulsegge Flood simulation by Maxim Knepfle Old Cadastral boundaries in project Virtueel Hoogeveen by Andy Benjamins Shadow analysis in Revit by Ekko Nap Energy transition for the built environment VNG Tomahawk BIM integration by IRP Revit integration by Enveo Subdivision of 3DBAG into indoor entities by Coders CO.","title":"Applications of 3D BAG"},{"location":"overview/media/#public-adoption-of-3d-bag-in-other-platforms","text":"Amsterdam 3D Utrecht 3D Zwolle ESRI Dordrecht by Niels van der Vaart Amersfoort by Maarten Welmers Signum SpotInfo ROM3D Shint\u014d Labs","title":"Public adoption of 3D BAG in other platforms"},{"location":"overview/media/#tools-and-tutorials-on-3d-bag","text":"GIS2BIM tool for Dynamo by Maarten Vroegindeweij Infraworks video tutorial by Richard de Nier 3D BAG in Revit video by BFAS 3D BAG in AutoCAD article + video by RODEMA 3D BAG CityJSON to IFC article + video by Hans Lammerts","title":"Tools and tutorials on 3D BAG"},{"location":"overview/media/#3d-bag-in-the-news","text":"3DBAG gets ERC funding 3D BAG wins the 2021 Geospatial World Excellence Award in the Content Platform category Reddit Tweakers.net Geo-Info BK nieuws LinkedIn announcement by Jantien Stoter","title":"3D BAG in the news"},{"location":"overview/media/#publications-using-3dbag","text":"Automatic Building Age Prediction from Street View Images","title":"Publications using 3DBAG"},{"location":"overview/release_notes/","text":"21.09.8 \u2013 beta \u00b6 Release date: 29 September 2021 This is the second public beta release of the renewed 3D BAG. Before addressing what has changed with this release we would like to take a moment to thank everyone that has been downloading and using the first release. It's very exciting to see how people from various disciplines found ways to apply 3D BAG for their use cases! (also see our new In the media page). A special thanks also to everyone that filled out our feedback forms or gave us feedback in other ways. This is much appreciated! For this second release we focused primarily on improving the data quality and the way the data is disseminated. The overall geometric validity of the 3D models has risen to 98.25% (up from ~89% in the previous release). Another highlight is that the 3D outputs are no longer triangulated, as requested by several users. Altogether this should make it easier to use our models in other software. These and more changes are described below in more detail. This 3D BAG release contains 9 692 978 buildings. This is 7.72% less buildings than available in the BAG dataset, mostly due to outdated or otherwise insufficient input data. We hope to do a release based on the updated AHN4 soon, but this release is still based on AHN3. Thank you for using 3D BAG! Added \u00b6 The building part ID ( pand_deel_id ) to the 3D layers. Previously it was only part of the 2D layers. A new layer ( ondergrond ) with parts of the building polygons that were cut off during the reconstruction, because they were detected as the ground. Changed / Fixed \u00b6 Update of the source data sets (BAG, BGT, Top10NL) to the version available on 2021-09-07. 3D geometries are not triangulated anymore in the CityJSON, GeoPackage, PostgreSQL formats. The OBJ format remains triangulated. The CityJSON exporter was rewritten The semantic surfaces of type WallSurface now have an additional boolean attribute on_footprint which indicates if a WallSurface is on a footprint edge or not. The original BAG footprint is now included for each object CityObject ID's are now based on the BAG identificatie attribute Improvements in the reconstruction algorithm Added new triangulation-based snapping node. The goal of this node is to remove (near) duplicate vertices in the 2D roof partition without introducing topological problems. This fixes problems with e.g. spikes (due vertices with invalid coordinates) and missing faces in the final 3D models. With this improvement we have >98% valid geometries, up from 89% in the previous version. We checked this with val3dity . Added a nearest neighbor interpolation for no-data pixels in the heightfield that is used during optimisation. This interpolation picks the lowest value in the neighborhood (with radius of 10 cm at the moment) of the nodata pixel of interest. This should reduce the occurence of erroneous thin vertical 'screens' in building models (several still remain however). Several other smaller bugfixes and improvements. The object ID in the OBJ files is now the BAG ID ( identificatie ) instead of an integer sequence. Attribute name changes: From To _lod11_replace lod11_replace _semantics_values semantics_values _tile_id tile_id _reconstruction_skipped reconstruction_skipped _t_run q_t_run _roofplane_cnt q_roofplane_cnt _data_area q_data_area _nodata_area q_nodata_area _data_coverage q_data_coverage _roof_pt_cnt q_roof_pt_cnt _wall_pt_cnt q_wall_pt_cnt _unsegmented_pt_cnt q_unsegmented_pt_cnt _pc2m_error_hist q_pc2m_error_hist _m2pc_error_hist q_m2pc_error_hist _m2pc_error_max q_m2pc_error_max _rmse q_rmse The roofpart ID ( dd_id ) starts with 0. Previously it started with 1. The value could not detect of the dak_type attribute has been changed to no planes . GPKG format: preserve the feature ID ( fid ) in the pand layer so it is possible to join the other layers on fid . Fixed the duplicate / cloned objects in the output. Improve 3D tiles export and rendering in the Viewer Known issues \u00b6 Artificial vertical 'screens' still occur in some building models. 1.75% of the buildings is geometrically invalid, consult the val3dity_codes attribute to find out which ones. Missing tiles for download (in all formats): 10, 41, 42, 117, 143, 228, 301, 381, 776, 1485, 1876, 2178, 2333, 2436, 2511, 2662, 2713, 5158, 5186, 5228, 6813, 7364. In the 3D viewer some additional tiles may be missing. Self-intersection on buildings that have a roofplane detected that extends below h_maaiveld . Possibly incaccurate building geometry for buildings with glass roofs. Intersecting 3D geometries in case the input BAG footprints overlap. Possible duplicate vertices in CityJSON files. 21.03.1 \u2013 beta \u00b6 Release date: 26 March 2021 Added \u00b6 A brand new 3D viewer. Multiple LoDs, LoD1.2, LoD1.3, LoD2.2. 2D and 3D variants of all LoDs. The 3D models are triangulated. More accurate height calculation, due to our new reconstruction method. Underground buildings and floating buildings are removed, underground parts are cut off from the models. This means that we modify the incoming BAG footprints by removing the underground parts. Integrated validation of the 3D models with val3dity. OBJ and CityJSON data formats. A completely re-worked documentation. Report issues on individual buildings and provide general feedback with a form. Changed \u00b6 Downloads are available in tiles instead of the whole country. Except the PostgreSQL backup, which is only available for the whole country. Switched to BAG 2.0. Basically all the attributes have changed. Note that due to our new reconstruction method, the meaning of the building height percentiles h_dak have changed too. Previously we had multiple percentiles for the ground height, while there is only one h_maaiveld now. All the URLs. New contact information. Removed \u00b6 CSV data format. Known issues \u00b6 Some buildings have a 'spike': a large deviation in the building geometry due to one vertex with an erroneous coordinate (3D models only). Not all buildings are geometrically valid (eg. missing face). Note that this should be evident from the val3dity_codes attribute (3D models only). Missing tiles (in all formats): 6, 8, 10, 20, 42, 50, 51, 52, 53, 57, 309, 736, 1389, 2178, 3647. On the top of the previous list, the following tiles are missing a CityJSON format: 19, 251, 298, 365, 381, 702, 1051, 1812, 2535, 2700, 2962, 2996, 3173, 3324, 3381, 3796, 4248, 4511, 4615, 4729, 5316, 5411, 6237, 6690, 6986, 7290, 7470, 7597, 8061.","title":"Release Notes"},{"location":"overview/release_notes/#21098-beta","text":"Release date: 29 September 2021 This is the second public beta release of the renewed 3D BAG. Before addressing what has changed with this release we would like to take a moment to thank everyone that has been downloading and using the first release. It's very exciting to see how people from various disciplines found ways to apply 3D BAG for their use cases! (also see our new In the media page). A special thanks also to everyone that filled out our feedback forms or gave us feedback in other ways. This is much appreciated! For this second release we focused primarily on improving the data quality and the way the data is disseminated. The overall geometric validity of the 3D models has risen to 98.25% (up from ~89% in the previous release). Another highlight is that the 3D outputs are no longer triangulated, as requested by several users. Altogether this should make it easier to use our models in other software. These and more changes are described below in more detail. This 3D BAG release contains 9 692 978 buildings. This is 7.72% less buildings than available in the BAG dataset, mostly due to outdated or otherwise insufficient input data. We hope to do a release based on the updated AHN4 soon, but this release is still based on AHN3. Thank you for using 3D BAG!","title":"21.09.8 \u2013 beta"},{"location":"overview/release_notes/#21031-beta","text":"Release date: 26 March 2021","title":"21.03.1 \u2013 beta"},{"location":"overview/sources/","text":"Data sources \u00b6 The quality and characteristics of the 3D BAG partly depend on the source data that we use. The better the input, the better the 3D BAG. Several of our choices were governed by the characteristics of these input data sets. Therefore, in order to better understand the 3D BAG, it is important to take a look at the data sources first. BAG \u00b6 The Register of Buildings and Addresses (BAG) is the most detailed, openly available data set on buildings and addresses in the Netherlands. It contains information about each address in a building, such as its current use, construction date or registration status. The data set is regularly updated as new buildings are registered, built or demolished. The municipalities are responsible for the acquisition, maintenance and quality assurance of the data within their boundaries. The data from all municipalities together are centralised and published by Kadaster. The BAG contains several types of geometrical objects. For the 3D BAG only the buildings are used. The polygons in the BAG represent the outline of the building as the projection of the building as seen from above (including underground parts). While in comparison, the BGT registers the footprint of the building as it touches the terrain. The geometry of BAG buildings is acquired from aerial photos and terrestrial measurements and the data positional data accuracy is 30 cm. An overview of the attributes of the BAG can be found in the BAG manual . As source for the 3D BAG we always use the most recent BAG 2.0 data. AHN \u00b6 The National Height Model of the Netherlands (AHN) is the openly available elevation data set of the Netherlands. This is acquired through airborne laser scanning (LiDAR), with an average point density of 8 points per square meter for the current version. For the 3D BAG we currently use the third version, AHN3. This version was collected in stages, between 2014 and 2019. Here you can find the collection dates for each region in the Netherlands. One of the arguments against using the AHN for 3D reconstruction is that is deemed to be out dated by design, due to long mission times for acquiring the scans. However, the building stock changes in a relatively slow pace. This pace being faster in metropolitan regions and slower in remote areas of the country. Unfortunately, timestamps are not provided with the point data in the AHN3, but we can only compare the acquisition years for a region to the construction years of the buildings. From this we estimate that about 95% of the measured building heights are still valid (estimated for the 3D BAG generated in March 2021). Additionally, there is a variation in the point density between buildings. There can be gaps in the point cloud, caused by an occlusion through objects, water ponds on roofs and scan angle. The number of available points, their distribution and accurate classification has a very significant impact on the quality of the reconstructed models. The quality attributes that we calculate for and assign to each model provide an indication of this quality. AHN4? \u00b6 At the moment of writing the new AHN4 will soon become available for a part of the country. While the AHN3 was acquired in 5 years, the AHN4 must be done in 3 years. The new AHN will have a different, improved quality, compared to the AHN3, and we expect that this will have a visible impact on the 3D BAG as well. As soon as the first region is available, we will integrate it into our process. BGT \u00b6 The Large Scale Topographic Map of the Netherlands contains many object types besides buildings, such as roads, water ways, railways, and it forms a complete coverage of the country. The responsible source providers are organisations that have a task to maintain public space, such as the provinces, municipalities and water boards, each in their own administration. For the 3D BAG, the BGT is used for detecting the buildings that overlap with other objects, such as roads and other buildings. Such overlapping buildings are marked and excluded from the reconstruction process. TOP10NL \u00b6 The TOP10NL is part of the TOPNL data sets , which belong to the Topographic Register of the Netherlands. The TOP10NL can be used at various scales, ranging from 1:5,000 to 1:25,000. It models several object types, including buildings and their function. The TOPNL data can be used as data source, as well as base maps in visualisations. From the TOP10NL we only use the buildings in order to identify the greenhouses and large warehouses among the BAG objects. Due to their glass roof, greenhouses are problematic for our reconstruction algorithm. Therefore we only model them with a simplified shape.","title":"Data Sources"},{"location":"overview/sources/#data-sources","text":"The quality and characteristics of the 3D BAG partly depend on the source data that we use. The better the input, the better the 3D BAG. Several of our choices were governed by the characteristics of these input data sets. Therefore, in order to better understand the 3D BAG, it is important to take a look at the data sources first.","title":"Data sources"},{"location":"overview/sources/#bag","text":"The Register of Buildings and Addresses (BAG) is the most detailed, openly available data set on buildings and addresses in the Netherlands. It contains information about each address in a building, such as its current use, construction date or registration status. The data set is regularly updated as new buildings are registered, built or demolished. The municipalities are responsible for the acquisition, maintenance and quality assurance of the data within their boundaries. The data from all municipalities together are centralised and published by Kadaster. The BAG contains several types of geometrical objects. For the 3D BAG only the buildings are used. The polygons in the BAG represent the outline of the building as the projection of the building as seen from above (including underground parts). While in comparison, the BGT registers the footprint of the building as it touches the terrain. The geometry of BAG buildings is acquired from aerial photos and terrestrial measurements and the data positional data accuracy is 30 cm. An overview of the attributes of the BAG can be found in the BAG manual . As source for the 3D BAG we always use the most recent BAG 2.0 data.","title":"BAG"},{"location":"overview/sources/#ahn","text":"The National Height Model of the Netherlands (AHN) is the openly available elevation data set of the Netherlands. This is acquired through airborne laser scanning (LiDAR), with an average point density of 8 points per square meter for the current version. For the 3D BAG we currently use the third version, AHN3. This version was collected in stages, between 2014 and 2019. Here you can find the collection dates for each region in the Netherlands. One of the arguments against using the AHN for 3D reconstruction is that is deemed to be out dated by design, due to long mission times for acquiring the scans. However, the building stock changes in a relatively slow pace. This pace being faster in metropolitan regions and slower in remote areas of the country. Unfortunately, timestamps are not provided with the point data in the AHN3, but we can only compare the acquisition years for a region to the construction years of the buildings. From this we estimate that about 95% of the measured building heights are still valid (estimated for the 3D BAG generated in March 2021). Additionally, there is a variation in the point density between buildings. There can be gaps in the point cloud, caused by an occlusion through objects, water ponds on roofs and scan angle. The number of available points, their distribution and accurate classification has a very significant impact on the quality of the reconstructed models. The quality attributes that we calculate for and assign to each model provide an indication of this quality.","title":"AHN"},{"location":"overview/sources/#ahn4","text":"At the moment of writing the new AHN4 will soon become available for a part of the country. While the AHN3 was acquired in 5 years, the AHN4 must be done in 3 years. The new AHN will have a different, improved quality, compared to the AHN3, and we expect that this will have a visible impact on the 3D BAG as well. As soon as the first region is available, we will integrate it into our process.","title":"AHN4?"},{"location":"overview/sources/#bgt","text":"The Large Scale Topographic Map of the Netherlands contains many object types besides buildings, such as roads, water ways, railways, and it forms a complete coverage of the country. The responsible source providers are organisations that have a task to maintain public space, such as the provinces, municipalities and water boards, each in their own administration. For the 3D BAG, the BGT is used for detecting the buildings that overlap with other objects, such as roads and other buildings. Such overlapping buildings are marked and excluded from the reconstruction process.","title":"BGT"},{"location":"overview/sources/#top10nl","text":"The TOP10NL is part of the TOPNL data sets , which belong to the Topographic Register of the Netherlands. The TOP10NL can be used at various scales, ranging from 1:5,000 to 1:25,000. It models several object types, including buildings and their function. The TOPNL data can be used as data source, as well as base maps in visualisations. From the TOP10NL we only use the buildings in order to identify the greenhouses and large warehouses among the BAG objects. Due to their glass roof, greenhouses are problematic for our reconstruction algorithm. Therefore we only model them with a simplified shape.","title":"TOP10NL"},{"location":"schema/attributes/","text":"Data Attributes \u00b6 begingeldigheid \u00b6 Relates to the building registration history and version. Data type : date Unit : YYYY-MM-DD Source : BAG. See BAG Catalogus dak_type \u00b6 Roof type of the building. Data type : categorical Unit : - Values : Values Description slanted Roof with at least one slanted surface. multiple horizontal Roof with multiple, only horizontal surfaces. single horizontal Roof with a single horizontal surface. no points No point was found for the building. could not detect Could not detect a roof surface, even though points were found. dd_id \u00b6 Dak Deel ID. Roofpart ID. Data type : nominal number Unit : - documentdatum \u00b6 Building registration date. Data type : date Unit : YYYY-MM-DD Source : BAG. See BAG Catalogus documentnummer \u00b6 Document number. Data type : text Unit : YYYY-MM-DD Source : BAG. See BAG Catalogus eindgeldigheid \u00b6 Relates to the building registration history and version. Data type : date Unit : YYYY-MM-DD Source : BAG. See BAG Catalogus fid \u00b6 Numeric ID of a building (feature). Data type : nominal number Unit : - geconstateerd \u00b6 Indicates that the buildings has included in the BAG registration. Data type : categorical Unit : yes/no Source : BAG. See BAG Catalogus gid \u00b6 Geometry ID. Data type : nominal number Unit : - h_dak_50p \u00b6 Elevation above sea level (NAP) at rooflevel. Calculated as the median of all elevation points on the corresponding roofpart. Data type : real number Unit : metre h_dak_70p \u00b6 Elevation above sea level (NAP) at rooflevel. Calculated as the 70th percentile of all elevation points on the corresponding roofpart. Data type : real number Unit : metre h_dak_max \u00b6 Elevation above sea level (NAP) at rooflevel. Calculated as the maximum of all elevation points on the corresponding roofpart. Data type : real number Unit : metre h_dak_min \u00b6 Elevation above sea level (NAP) at rooflevel. Calculated as the minimum of all elevation points on the corresponding roofpart. Data type : real number Unit : metre h_maaiveld \u00b6 Elevation above sea level (Amsterdam Ordnance Datum) at the ground level of the building. Calculated as the 5th percentile of the ground points found within a 4 meter radius of the building. Data type : real number Unit : metre identificatie \u00b6 ID of a building. Data type : text Unit : - Source : BAG. See BAG Catalogus kas_warenhuis \u00b6 The building is greenhouse or warehouse (according to TOP10NL). Data type : categorical Unit : yes/no lod11_replace \u00b6 Indicates whether the LoD1.3/LoD2.2 reconstruction was skipped for this feature (and also LoD1.1 reconstruction if lod11_replace==false ). This can happen when there were no points found for the building. Data type : categorical Unit : yes/no ondergronds_type \u00b6 Underground classification of the building or building part. Data type : categorical Unit : - Values : Values Description floating Building or building part is floating above other objects. above ground Building or building part is completely above ground. underground Building or building part is completely under ground. oorspronkelijk_bouwjaar \u00b6 Building construction year. Data type : date Unit : YYYY Source : BAG. See BAG Catalogus pand_deel_id \u00b6 Buildingpart ID. A building can have multiple parts when it was cut into parts because of underground parts. Data type : nominal number Unit : - pw_actueel \u00b6 Indicates that the point cloud is actual w.r.t. the age of the building. Data type : categorical Unit : - Values : Values Description yes The point cloud was acquired after the construction date of the building. no The point cloud was acquired before the construction date of the building. uncertain The point cloud was acquired in the same year as the construction date of the building. pw_bron \u00b6 Source of the point cloud. Data type : text Unit : - pw_datum \u00b6 Acquisition date of the point cloud. In case of the AHN3, this is an assumed acquisition date, which is computed as 1st of December in the year before the officially reported acquisition year (inwinjaar) of a particular AHN3 tile. Data type : date Unit : YYYY-MM-DD reconstructie_methode \u00b6 Reconstruction method of the building model. Data type : text Unit : - reconstruction_skipped \u00b6 Indicates whether full LoD1.2/LoD1.3/LoD2.2 reconstruction was skipped for this feature (and also LoD1.1 if lod11_replace==false). Data type : categorical Unit : yes/no semantics_values \u00b6 Building surface semantics. This is an array of integers, where an integer refers to a surface type (0: GroundSurface , 1: RoofSurface , 2: OuterWallSurface , 3: InnerWallSurface ). If a surface does not have a semantic value, NULL is used instead. Thus the length of the array equals the number of surfaces, and the order of values in the array corresponds to the order of surfaces. Data type : list Unit : - status \u00b6 The current fase in the buildings life-cycle. Data type : categorical Unit : - Source : BAG. See BAG Catalogus Values : Values Description Bouwvergunning verleend Niet gerealiseerd pand Bouw gestart Pand in gebruik (niet ingemeten) Pand in gebruik Verbouwing pand Sloopvergunning verleend Pand gesloopt Pand buiten gebruik Pand ten onrechte opgevoerd tijdstipeindregistratielv \u00b6 Relates to the building registration history and version. Data type : date-time Unit : YYYY-MM-DDThh:mm:ss.sss Source : BAG. See BAG Catalogus tijdstipinactief \u00b6 Relates to the building registration history and version. Data type : date-time Unit : YYYY-MM-DDThh:mm:ss.sss Source : BAG. See BAG Catalogus tijdstipinactieflv \u00b6 Relates to the building registration history and version. Data type : date-time Unit : YYYY-MM-DDThh:mm:ss.sss Source : BAG. See BAG Catalogus tijdstipnietbaglv \u00b6 Relates to the building registration history and version. Data type : date-time Unit : YYYY-MM-DDThh:mm:ss.sss Source : BAG. See BAG Catalogus tijdstipregistratielv \u00b6 Relates to the building registration history and version. Data type : date-time Unit : YYYY-MM-DDThh:mm:ss.sss Source : BAG. See BAG Catalogus val3dity_codes \u00b6 Val3dity error codes for the 3D model. Null means valid geometry. Data type : list Unit : - versie_methode \u00b6 Version of the building reconstruction method. Data type : text Unit : - voorkomenidentificatie \u00b6 Relates to the building registration history and version. Data type : ordinal number Unit : - Source : BAG. See BAG Catalogus","title":"Data Attributes"},{"location":"schema/attributes/#data-attributes","text":"","title":"Data Attributes"},{"location":"schema/attributes/#begingeldigheid","text":"Relates to the building registration history and version. Data type : date Unit : YYYY-MM-DD Source : BAG. See BAG Catalogus","title":"begingeldigheid"},{"location":"schema/attributes/#dak_type","text":"Roof type of the building. Data type : categorical Unit : - Values : Values Description slanted Roof with at least one slanted surface. multiple horizontal Roof with multiple, only horizontal surfaces. single horizontal Roof with a single horizontal surface. no points No point was found for the building. could not detect Could not detect a roof surface, even though points were found.","title":"dak_type"},{"location":"schema/attributes/#dd_id","text":"Dak Deel ID. Roofpart ID. Data type : nominal number Unit : -","title":"dd_id"},{"location":"schema/attributes/#documentdatum","text":"Building registration date. Data type : date Unit : YYYY-MM-DD Source : BAG. See BAG Catalogus","title":"documentdatum"},{"location":"schema/attributes/#documentnummer","text":"Document number. Data type : text Unit : YYYY-MM-DD Source : BAG. See BAG Catalogus","title":"documentnummer"},{"location":"schema/attributes/#eindgeldigheid","text":"Relates to the building registration history and version. Data type : date Unit : YYYY-MM-DD Source : BAG. See BAG Catalogus","title":"eindgeldigheid"},{"location":"schema/attributes/#fid","text":"Numeric ID of a building (feature). Data type : nominal number Unit : -","title":"fid"},{"location":"schema/attributes/#geconstateerd","text":"Indicates that the buildings has included in the BAG registration. Data type : categorical Unit : yes/no Source : BAG. See BAG Catalogus","title":"geconstateerd"},{"location":"schema/attributes/#gid","text":"Geometry ID. Data type : nominal number Unit : -","title":"gid"},{"location":"schema/attributes/#h_dak_50p","text":"Elevation above sea level (NAP) at rooflevel. Calculated as the median of all elevation points on the corresponding roofpart. Data type : real number Unit : metre","title":"h_dak_50p"},{"location":"schema/attributes/#h_dak_70p","text":"Elevation above sea level (NAP) at rooflevel. Calculated as the 70th percentile of all elevation points on the corresponding roofpart. Data type : real number Unit : metre","title":"h_dak_70p"},{"location":"schema/attributes/#h_dak_max","text":"Elevation above sea level (NAP) at rooflevel. Calculated as the maximum of all elevation points on the corresponding roofpart. Data type : real number Unit : metre","title":"h_dak_max"},{"location":"schema/attributes/#h_dak_min","text":"Elevation above sea level (NAP) at rooflevel. Calculated as the minimum of all elevation points on the corresponding roofpart. Data type : real number Unit : metre","title":"h_dak_min"},{"location":"schema/attributes/#h_maaiveld","text":"Elevation above sea level (Amsterdam Ordnance Datum) at the ground level of the building. Calculated as the 5th percentile of the ground points found within a 4 meter radius of the building. Data type : real number Unit : metre","title":"h_maaiveld"},{"location":"schema/attributes/#identificatie","text":"ID of a building. Data type : text Unit : - Source : BAG. See BAG Catalogus","title":"identificatie"},{"location":"schema/attributes/#kas_warenhuis","text":"The building is greenhouse or warehouse (according to TOP10NL). Data type : categorical Unit : yes/no","title":"kas_warenhuis"},{"location":"schema/attributes/#lod11_replace","text":"Indicates whether the LoD1.3/LoD2.2 reconstruction was skipped for this feature (and also LoD1.1 reconstruction if lod11_replace==false ). This can happen when there were no points found for the building. Data type : categorical Unit : yes/no","title":"lod11_replace"},{"location":"schema/attributes/#ondergronds_type","text":"Underground classification of the building or building part. Data type : categorical Unit : - Values : Values Description floating Building or building part is floating above other objects. above ground Building or building part is completely above ground. underground Building or building part is completely under ground.","title":"ondergronds_type"},{"location":"schema/attributes/#oorspronkelijk_bouwjaar","text":"Building construction year. Data type : date Unit : YYYY Source : BAG. See BAG Catalogus","title":"oorspronkelijk_bouwjaar"},{"location":"schema/attributes/#pand_deel_id","text":"Buildingpart ID. A building can have multiple parts when it was cut into parts because of underground parts. Data type : nominal number Unit : -","title":"pand_deel_id"},{"location":"schema/attributes/#pw_actueel","text":"Indicates that the point cloud is actual w.r.t. the age of the building. Data type : categorical Unit : - Values : Values Description yes The point cloud was acquired after the construction date of the building. no The point cloud was acquired before the construction date of the building. uncertain The point cloud was acquired in the same year as the construction date of the building.","title":"pw_actueel"},{"location":"schema/attributes/#pw_bron","text":"Source of the point cloud. Data type : text Unit : -","title":"pw_bron"},{"location":"schema/attributes/#pw_datum","text":"Acquisition date of the point cloud. In case of the AHN3, this is an assumed acquisition date, which is computed as 1st of December in the year before the officially reported acquisition year (inwinjaar) of a particular AHN3 tile. Data type : date Unit : YYYY-MM-DD","title":"pw_datum"},{"location":"schema/attributes/#reconstructie_methode","text":"Reconstruction method of the building model. Data type : text Unit : -","title":"reconstructie_methode"},{"location":"schema/attributes/#reconstruction_skipped","text":"Indicates whether full LoD1.2/LoD1.3/LoD2.2 reconstruction was skipped for this feature (and also LoD1.1 if lod11_replace==false). Data type : categorical Unit : yes/no","title":"reconstruction_skipped"},{"location":"schema/attributes/#semantics_values","text":"Building surface semantics. This is an array of integers, where an integer refers to a surface type (0: GroundSurface , 1: RoofSurface , 2: OuterWallSurface , 3: InnerWallSurface ). If a surface does not have a semantic value, NULL is used instead. Thus the length of the array equals the number of surfaces, and the order of values in the array corresponds to the order of surfaces. Data type : list Unit : -","title":"semantics_values"},{"location":"schema/attributes/#status","text":"The current fase in the buildings life-cycle. Data type : categorical Unit : - Source : BAG. See BAG Catalogus Values : Values Description Bouwvergunning verleend Niet gerealiseerd pand Bouw gestart Pand in gebruik (niet ingemeten) Pand in gebruik Verbouwing pand Sloopvergunning verleend Pand gesloopt Pand buiten gebruik Pand ten onrechte opgevoerd","title":"status"},{"location":"schema/attributes/#tijdstipeindregistratielv","text":"Relates to the building registration history and version. Data type : date-time Unit : YYYY-MM-DDThh:mm:ss.sss Source : BAG. See BAG Catalogus","title":"tijdstipeindregistratielv"},{"location":"schema/attributes/#tijdstipinactief","text":"Relates to the building registration history and version. Data type : date-time Unit : YYYY-MM-DDThh:mm:ss.sss Source : BAG. See BAG Catalogus","title":"tijdstipinactief"},{"location":"schema/attributes/#tijdstipinactieflv","text":"Relates to the building registration history and version. Data type : date-time Unit : YYYY-MM-DDThh:mm:ss.sss Source : BAG. See BAG Catalogus","title":"tijdstipinactieflv"},{"location":"schema/attributes/#tijdstipnietbaglv","text":"Relates to the building registration history and version. Data type : date-time Unit : YYYY-MM-DDThh:mm:ss.sss Source : BAG. See BAG Catalogus","title":"tijdstipnietbaglv"},{"location":"schema/attributes/#tijdstipregistratielv","text":"Relates to the building registration history and version. Data type : date-time Unit : YYYY-MM-DDThh:mm:ss.sss Source : BAG. See BAG Catalogus","title":"tijdstipregistratielv"},{"location":"schema/attributes/#val3dity_codes","text":"Val3dity error codes for the 3D model. Null means valid geometry. Data type : list Unit : -","title":"val3dity_codes"},{"location":"schema/attributes/#versie_methode","text":"Version of the building reconstruction method. Data type : text Unit : -","title":"versie_methode"},{"location":"schema/attributes/#voorkomenidentificatie","text":"Relates to the building registration history and version. Data type : ordinal number Unit : - Source : BAG. See BAG Catalogus","title":"voorkomenidentificatie"},{"location":"schema/concepts/","text":"General Concepts \u00b6 Level of Detail (LoD) \u00b6 All spatial models are abstractions of reality. Some are closer to the real thing, while others are less so. In 3D GIS, the Level of Detail (LoD) of a 3D model describes the amount of detail that is captured in the model, although a high LoD can still be an inaccurate approximation of reality. For instance, consider a very simple building with four corners and a gabled roof. A very rough approximation of this building would be a cube. While on the other end, we could have individual surfaces in the model that follow the shape of the building exactly, each of them labelled with additional information like surface type, material etc. Higher LoDs (LoD2 and above) can label the surfaces of the model based on their function in the real object. These labels are called semantics , and accordingly we call the labelled surfaces semantic surfaces . For instance in case of building models, we can identify a ground surface , wall surface , roof surface etc. In the 3D BAG, we use the so called improved LoD specification , as it is displayed in the figure below. An improved LOD specification for 3D building models. Filip Biljecki, Hugo Ledoux, and Jantien Stoter. Computers, Environment and Urban Systems, 59: 25\u201337, 2016. DOI For the 3D BAG the relevant LoDs are 1.2, 1.3, and 2.2. Note that apart from the amount of geometric detail, the key difference between LoD1 and LoD2 is the presence of semantic surfaces , to allow, for example, roof surfaces to be coloured red and wall surfaces to be coloured grey. Furthermore, the distinction between LoD1.2 and LoD1.3 is that LoD1.3 distinguishes between significant height differences within one building, while in case of LoD1.2 the whole model has a uniform height. 3D geometric primitives \u00b6 In 2D GIS, the geometry of objects can be represented by points , lines , polygons and their variations. There are standards that prescribe a set of rules for these primitives so that data can be exchanged in an interoperable manner (eg Simple Feature Access ). In 3D GIS, the geometric primitives and their rules need to be extended to the third dimension, so that their interactions can be described in a meaningful way. The figure below gives an overview of the commonly used primitives in 3D GIS. 3D primitives handled by val3dity. See: Val3dity: validation of 3D GIS primitives according to the international standards. Hugo Ledoux. Open Geospatial Data, Software and Standards 3 (1), 2018, pp. 1. DOI For the 3D BAG the most relevant primitive is the Solid , as we treat the building models as Solids in our process. This distinction is important, because of the (stricter) rules that apply to Solids, compared to other 3D primitives. 3D primitives and data formats Not every data format supports the 3D primitives mentioned above. In fact, this applies to all our export formats except CityJSON. Therefore, in such formats we use the geometry types that are the closest equivalent to Solids. The PostgreSQL backup is a bit of an outlier here, because technically PostGIS can store Solids, but only with the SFCGAL extension . In order to cause the least friction for restoring the PostgreSQL backup, we store the 3D geometries as MultiPolygonZ . Valid 3D geometries \u00b6 Having valid geometries is important for using the data in various applications. Standards help to define a common set of rules to which both data producers and consumers can adhere to, when working with data. val3dity is a software that validates 3D primitives according to the international standard ISO19107. We integrated val3dity into our process, and so we validate each 3D model after it is reconstructed. However, the building models are validated independently as they go through the reconstruction process. Therefore, we cannot detect errors in the interaction of multiple models (error codes above 500). val3dity_codes The attribute val3dity_codes stores the error codes from val3dity (if any) for a model. val3dity error codes. See the full description of each code in the val3dity documentation.","title":"General Concepts"},{"location":"schema/concepts/#general-concepts","text":"","title":"General Concepts"},{"location":"schema/concepts/#level-of-detail-lod","text":"All spatial models are abstractions of reality. Some are closer to the real thing, while others are less so. In 3D GIS, the Level of Detail (LoD) of a 3D model describes the amount of detail that is captured in the model, although a high LoD can still be an inaccurate approximation of reality. For instance, consider a very simple building with four corners and a gabled roof. A very rough approximation of this building would be a cube. While on the other end, we could have individual surfaces in the model that follow the shape of the building exactly, each of them labelled with additional information like surface type, material etc. Higher LoDs (LoD2 and above) can label the surfaces of the model based on their function in the real object. These labels are called semantics , and accordingly we call the labelled surfaces semantic surfaces . For instance in case of building models, we can identify a ground surface , wall surface , roof surface etc. In the 3D BAG, we use the so called improved LoD specification , as it is displayed in the figure below. An improved LOD specification for 3D building models. Filip Biljecki, Hugo Ledoux, and Jantien Stoter. Computers, Environment and Urban Systems, 59: 25\u201337, 2016. DOI For the 3D BAG the relevant LoDs are 1.2, 1.3, and 2.2. Note that apart from the amount of geometric detail, the key difference between LoD1 and LoD2 is the presence of semantic surfaces , to allow, for example, roof surfaces to be coloured red and wall surfaces to be coloured grey. Furthermore, the distinction between LoD1.2 and LoD1.3 is that LoD1.3 distinguishes between significant height differences within one building, while in case of LoD1.2 the whole model has a uniform height.","title":"Level of Detail (LoD)"},{"location":"schema/concepts/#3d-geometric-primitives","text":"In 2D GIS, the geometry of objects can be represented by points , lines , polygons and their variations. There are standards that prescribe a set of rules for these primitives so that data can be exchanged in an interoperable manner (eg Simple Feature Access ). In 3D GIS, the geometric primitives and their rules need to be extended to the third dimension, so that their interactions can be described in a meaningful way. The figure below gives an overview of the commonly used primitives in 3D GIS. 3D primitives handled by val3dity. See: Val3dity: validation of 3D GIS primitives according to the international standards. Hugo Ledoux. Open Geospatial Data, Software and Standards 3 (1), 2018, pp. 1. DOI For the 3D BAG the most relevant primitive is the Solid , as we treat the building models as Solids in our process. This distinction is important, because of the (stricter) rules that apply to Solids, compared to other 3D primitives. 3D primitives and data formats Not every data format supports the 3D primitives mentioned above. In fact, this applies to all our export formats except CityJSON. Therefore, in such formats we use the geometry types that are the closest equivalent to Solids. The PostgreSQL backup is a bit of an outlier here, because technically PostGIS can store Solids, but only with the SFCGAL extension . In order to cause the least friction for restoring the PostgreSQL backup, we store the 3D geometries as MultiPolygonZ .","title":"3D geometric primitives"},{"location":"schema/concepts/#valid-3d-geometries","text":"Having valid geometries is important for using the data in various applications. Standards help to define a common set of rules to which both data producers and consumers can adhere to, when working with data. val3dity is a software that validates 3D primitives according to the international standard ISO19107. We integrated val3dity into our process, and so we validate each 3D model after it is reconstructed. However, the building models are validated independently as they go through the reconstruction process. Therefore, we cannot detect errors in the interaction of multiple models (error codes above 500). val3dity_codes The attribute val3dity_codes stores the error codes from val3dity (if any) for a model. val3dity error codes. See the full description of each code in the val3dity documentation.","title":"Valid 3D geometries"},{"location":"schema/layers/","text":"Data Layers \u00b6 The diagram above shows the relation between a building in the real world and how is it modeled in the 3D BAG. The BAG models buildings with their largest extent as viewed from above. In practice this means a single 2D polygon per building, as it is displayed by the black polygon in the figure. Therefore, the BAG polygon may also include parts of the building that are below terrain level. In order to create an accurate model of the above terrain parts of a building, we cut off the below terrain parts from the BAG polygon. We only consider the parts above the terrain, because we do not have data on the 3D extent of the parts below the terrain. From the parts above terrain we then generate the 3D models in LoD1.2, 1.3 and 2.2. We realise that for some applications it is more suitable to read 2D polygons, and the building height information from attributes. Therefore, we also provide a 2D counterpart in each LoD. lod11_replace In case of greenhouses and large warehouses we do not cut off any parts of the BAG model, but take the polygon as is, and only generate an LoD1.1 model. Thus, such buildings only have an LoD1.1 model and are marked with the attribute value lod11_replace = true . In case of the 2D models, the polygons represent the 2D projection of the roof planes of the 3D model. For LoD1.2 and LoD1.3, the 3D model can be fully reconstructed from the 2D model, by taking the 2D polygons and extruding each to one of their h_dak_* height values from their heights at surface level which is stored in h_maaiveld . However, this is not true for the LoD2.2 models, since here we have slanted roof planes, which cannot be represented by a 2D polygon and a single height value. The 3D BAG has 6 geometric representations of a BAG object (a feature ). The 6 representations are the 2D and 3D variants of the LoD1.2, LoD1.3 and LoD2.2 models of the feature. Therefore, the BAG models, which are stored on the pand layer, have a feature ID ( fid ), while their geometric representations have geometry IDs ( gid ). Depending on the representation, a single feature can have multiple geometry parts. Some buildings have multiple disjoint part above the terrain, while they are connected with an underground garage for instance. In such cases, the above terrain parts are split into separate models with the same fid , and the pand_deel_id can identify these parts within the same feature. The figure below illustrates the relation between the feature and the various geometry parts above terrain . Calculation of height values \u00b6 Each LoD of a building in 3D BAG has one ground height ( h_maaiveld ) and one or more roof heights ( h_dak_* ). All heights are given in EPSG:7415. The ground height is determined as the 5th elevation percentile of all the AHN ground points that were found in a 4 meter radius around the BAG polygon of a building. The roof heights ( h_dak_* ) are computed from the AHN points that that were detected to be part of a roof plane. Per roofpart we always compute the 0th (minimum height), 50th (median height), 70th, and 100th (maximum) percentiles. For instance h_dak_50p means the median height of the roof points. The figure below illustrates the detected roof points on a building. Notice that facade points are thus excluded from this computation. Illustration of the detected roof points (red) and wall points (grey). Heights in 2D vs 3D layers \u00b6 For the 2D layers the heights are the statistcal aggregates as explained above and given as an attribute for each modelled roofpart. For the 3D layers the heights are not given as attributes since they are explicitly modelled in the 3D geometry of the model. For the LoD1.2 and LoD1.3 layers (where each roofpart is modelled at a single height) the 70th percentile roof heights are used in the extrusion. In the LoD2.2 3D ( lod22_3d ) layer the roofs are directly modelled with the roof planes that were detected in the AHN point cloud. Height picking in the 3D webviewer If you click on a building in our 3D webviewer, you'll notice a height value shown in the bottom left corner of the screen. This is the height of the building at the clicked location as measured from the base of the building, ie. h_maaiveld is already subtracted from this. ondergrond \u00b6 The underground parts of a BAG polygon that were removed during the reconstruction from the LoD1.2, LoD1.3 and LoD2.2 models. pand \u00b6 Stores the attributes and geometry of the Pand object of the BAG, plus the attributes of the 3D BAG that relate to the whole building. Contains only those buildings that went into the reconstruction. The attribute fid is the unique, numeric ID of the objects. Besides being the primary key, fid is also used for joining the other layers to pand . lod12_3d \u00b6 A 3D model of the building parts above the terrain, modelled in LoD1.2. Can join to pand on fid . lod12_2d \u00b6 The 2D projection of the LoD1.2 model. The elevation of the detected LoD1.2 roof planes are stored as height attributes ( h_dak_* ). Only the above terrain parts of the BAG footprint are included. Can join to pand on fid . lod13_3d \u00b6 A 3D model of the building parts above the terrain, modelled in LoD1.3. Can join to pand on fid . lod13_2d \u00b6 The 2D projection of the LoD1.3 model. The elevation of the detected LoD1.3 roof planes are stored as height attributes ( h_dak_* ). Only the above terrain parts of the BAG footprint are included. Can join to pand on fid . lod22_3d \u00b6 A 3D model of the building parts above the terrain, modelled in LoD2.2. Can join to pand on fid . lod22_2d \u00b6 The 2D projection of the LoD2.2 model. The elevation of the detected LoD2.2 roof planes are stored as height attributes ( h_dak_* ). Note that the slanted roof planes of the 3D model cannot be reconstructed from these 2D polygons and height attributes. Only the above terrain parts of the BAG footprint are included. Can join to pand on fid .","title":"Data Layers"},{"location":"schema/layers/#data-layers","text":"The diagram above shows the relation between a building in the real world and how is it modeled in the 3D BAG. The BAG models buildings with their largest extent as viewed from above. In practice this means a single 2D polygon per building, as it is displayed by the black polygon in the figure. Therefore, the BAG polygon may also include parts of the building that are below terrain level. In order to create an accurate model of the above terrain parts of a building, we cut off the below terrain parts from the BAG polygon. We only consider the parts above the terrain, because we do not have data on the 3D extent of the parts below the terrain. From the parts above terrain we then generate the 3D models in LoD1.2, 1.3 and 2.2. We realise that for some applications it is more suitable to read 2D polygons, and the building height information from attributes. Therefore, we also provide a 2D counterpart in each LoD. lod11_replace In case of greenhouses and large warehouses we do not cut off any parts of the BAG model, but take the polygon as is, and only generate an LoD1.1 model. Thus, such buildings only have an LoD1.1 model and are marked with the attribute value lod11_replace = true . In case of the 2D models, the polygons represent the 2D projection of the roof planes of the 3D model. For LoD1.2 and LoD1.3, the 3D model can be fully reconstructed from the 2D model, by taking the 2D polygons and extruding each to one of their h_dak_* height values from their heights at surface level which is stored in h_maaiveld . However, this is not true for the LoD2.2 models, since here we have slanted roof planes, which cannot be represented by a 2D polygon and a single height value. The 3D BAG has 6 geometric representations of a BAG object (a feature ). The 6 representations are the 2D and 3D variants of the LoD1.2, LoD1.3 and LoD2.2 models of the feature. Therefore, the BAG models, which are stored on the pand layer, have a feature ID ( fid ), while their geometric representations have geometry IDs ( gid ). Depending on the representation, a single feature can have multiple geometry parts. Some buildings have multiple disjoint part above the terrain, while they are connected with an underground garage for instance. In such cases, the above terrain parts are split into separate models with the same fid , and the pand_deel_id can identify these parts within the same feature. The figure below illustrates the relation between the feature and the various geometry parts above terrain .","title":"Data Layers"},{"location":"schema/layers/#calculation-of-height-values","text":"Each LoD of a building in 3D BAG has one ground height ( h_maaiveld ) and one or more roof heights ( h_dak_* ). All heights are given in EPSG:7415. The ground height is determined as the 5th elevation percentile of all the AHN ground points that were found in a 4 meter radius around the BAG polygon of a building. The roof heights ( h_dak_* ) are computed from the AHN points that that were detected to be part of a roof plane. Per roofpart we always compute the 0th (minimum height), 50th (median height), 70th, and 100th (maximum) percentiles. For instance h_dak_50p means the median height of the roof points. The figure below illustrates the detected roof points on a building. Notice that facade points are thus excluded from this computation. Illustration of the detected roof points (red) and wall points (grey).","title":"Calculation of height values"},{"location":"schema/layers/#heights-in-2d-vs-3d-layers","text":"For the 2D layers the heights are the statistcal aggregates as explained above and given as an attribute for each modelled roofpart. For the 3D layers the heights are not given as attributes since they are explicitly modelled in the 3D geometry of the model. For the LoD1.2 and LoD1.3 layers (where each roofpart is modelled at a single height) the 70th percentile roof heights are used in the extrusion. In the LoD2.2 3D ( lod22_3d ) layer the roofs are directly modelled with the roof planes that were detected in the AHN point cloud. Height picking in the 3D webviewer If you click on a building in our 3D webviewer, you'll notice a height value shown in the bottom left corner of the screen. This is the height of the building at the clicked location as measured from the base of the building, ie. h_maaiveld is already subtracted from this.","title":"Heights in 2D vs 3D layers"},{"location":"schema/layers/#ondergrond","text":"The underground parts of a BAG polygon that were removed during the reconstruction from the LoD1.2, LoD1.3 and LoD2.2 models.","title":"ondergrond"},{"location":"schema/layers/#pand","text":"Stores the attributes and geometry of the Pand object of the BAG, plus the attributes of the 3D BAG that relate to the whole building. Contains only those buildings that went into the reconstruction. The attribute fid is the unique, numeric ID of the objects. Besides being the primary key, fid is also used for joining the other layers to pand .","title":"pand"},{"location":"schema/layers/#lod12_3d","text":"A 3D model of the building parts above the terrain, modelled in LoD1.2. Can join to pand on fid .","title":"lod12_3d"},{"location":"schema/layers/#lod12_2d","text":"The 2D projection of the LoD1.2 model. The elevation of the detected LoD1.2 roof planes are stored as height attributes ( h_dak_* ). Only the above terrain parts of the BAG footprint are included. Can join to pand on fid .","title":"lod12_2d"},{"location":"schema/layers/#lod13_3d","text":"A 3D model of the building parts above the terrain, modelled in LoD1.3. Can join to pand on fid .","title":"lod13_3d"},{"location":"schema/layers/#lod13_2d","text":"The 2D projection of the LoD1.3 model. The elevation of the detected LoD1.3 roof planes are stored as height attributes ( h_dak_* ). Only the above terrain parts of the BAG footprint are included. Can join to pand on fid .","title":"lod13_2d"},{"location":"schema/layers/#lod22_3d","text":"A 3D model of the building parts above the terrain, modelled in LoD2.2. Can join to pand on fid .","title":"lod22_3d"},{"location":"schema/layers/#lod22_2d","text":"The 2D projection of the LoD2.2 model. The elevation of the detected LoD2.2 roof planes are stored as height attributes ( h_dak_* ). Note that the slanted roof planes of the 3D model cannot be reconstructed from these 2D polygons and height attributes. Only the above terrain parts of the BAG footprint are included. Can join to pand on fid .","title":"lod22_2d"}]}